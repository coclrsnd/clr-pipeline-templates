name: ECS Deployment

on:
  workflow_call:
    inputs:
      docker-image:
        required: true
        type: string
      ecs-cluster:
        required: true
        type: string
      ecs-service:
        required: true
        type: string
      aws-region:
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update ECS Service with new Docker image
        run: |
          # Update the ECS service to use the new Docker image from ECR
          ecs_service_update=$(aws ecs update-service \
            --cluster ${{ inputs.ecs-cluster }} \
            --service ${{ inputs.ecs-service }} \
            --force-new-deployment \
            --image ${{ inputs.docker-image }} \
            --query "service.serviceArn" \
            --output text)
          
          echo "Updated ECS Service: $ecs_service_update"
